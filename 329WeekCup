// 1.给你一个正整数 n 。n 中的每一位数字都会按下述规则分配一个符号：

// 最高有效位 上的数字分配到 正 号。
// 剩余每位上数字的符号都与其相邻数字相反。
// 返回所有数字及其对应符号的和。
// 示例 1：

// 输入：n = 521
// 输出：4
// 解释：(+5) + (-2) + (+1) = 4
// 示例 2：

// 输入：n = 111
// 输出：1
// 解释：(+1) + (-1) + (+1) = 1
// 示例 3：

// 输入：n = 886996
// 输出：0
// 解释：(+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0
// var alternateDigitSum = function (n) {
//     let temp = n.toString().split('');
//     let flag = true,
//         res = 0;
//     temp.forEach(element => {
//         if (flag) {
//             res += parseInt(element);
//         } else {
//             res -= parseInt(element);
//         }
//         flag = !flag;
//     });
//     return res;
// };
// let n = 521;
// alternateDigitSum(n);

// 2.班里有 m 位学生，共计划组织 n 场考试。给你一个下标从 0 开始、大小为 m x n 的整数矩阵 score ，其中每一行对应一位学生，而 score[i][j] 表示第 i 位学生在第 j 场考试取得的分数。矩阵 score 包含的整数 互不相同 。

// 另给你一个整数 k 。请你按第 k 场考试分数从高到低完成对这些学生（矩阵中的行）的排序。

// 返回排序后的矩阵。

 

// 示例 1：



// 输入：score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2
// 输出：[[7,5,11,2],[10,6,9,1],[4,8,3,15]]
// 解释：在上图中，S 表示学生，E 表示考试。
// - 下标为 1 的学生在第 2 场考试取得的分数为 11 ，这是考试的最高分，所以 TA 需要排在第一。
// - 下标为 0 的学生在第 2 场考试取得的分数为 9 ，这是考试的第二高分，所以 TA 需要排在第二。
// - 下标为 2 的学生在第 2 场考试取得的分数为 3 ，这是考试的最低分，所以 TA 需要排在第三。
// 示例 2：



// 输入：score = [[3,4],[5,6]], k = 0
// 输出：[[5,6],[3,4]]
// 解释：在上图中，S 表示学生，E 表示考试。
// - 下标为 1 的学生在第 0 场考试取得的分数为 5 ，这是考试的最高分，所以 TA 需要排在第一。
// - 下标为 0 的学生在第 0 场考试取得的分数为 3 ，这是考试的最低分，所以 TA 需要排在第二。
// var sortTheStudents = function(score, k) {
//     let arraySort = [];
//     let map = new Map();
//     for(let i=0;i<score.length;i++){
//         map.set(i,score[i][k]);
//     }
    
//     var arrayObj=Array.from(map);
//     arrayObj.sort((a,b)=>b[1]-a[1]);
//     for(const item of arrayObj){
//         arraySort.push(score[item[0]])    
//     }
//     return arraySort;
// };
// let score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2;
// sortTheStudents(score,k);
// 3.
